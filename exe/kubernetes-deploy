#!/usr/bin/env ruby
# frozen_string_literal: true

require 'kubernetes-deploy'
require 'optparse'

skip_wait = false
template_dir = nil
allow_protected_ns = false
prune = true
bindings = {}
verbose_log_prefix = false
max_watch_seconds = nil

ARGV.options do |opts|
  parser = KubernetesDeploy::BindingsParser.new
  opts.on("--bindings=BINDINGS", "Expose additional variables to ERB templates " \
    "(format: k1=v1,k2=v2, JSON string or file (JSON or YAML) path prefixed by '@')") { |b| parser.add(b) }

  opts.on("--skip-wait", "Skip verification of non-priority-resource success (not recommended)") { skip_wait = true }
  prot_ns = KubernetesDeploy::DeployTask::PROTECTED_NAMESPACES.join(', ')
  opts.on("--allow-protected-ns", "Enable deploys to #{prot_ns}; requires --no-prune") { allow_protected_ns = true }
  opts.on("--no-prune", "Disable deletion of resources that do not appear in the template dir") { prune = false }
  opts.on("--template-dir=DIR", "Set the template dir (default: config/deploy/$ENVIRONMENT).") do |d|
    template_dir = d
  end
  opts.on("--verbose-log-prefix", "Add [context][namespace] to the log prefix") { verbose_log_prefix = true }
  opts.on("--max-watch-seconds=seconds",
    "Timeout error is raised if it takes longer than the specified number of seconds") do |t|
    max_watch_seconds = t.to_i
  end

  opts.on_tail("-h", "--help", "Print this help") do
    puts opts
    exit
  end
  opts.on_tail("-v", "--version", "Show version") do
    puts "v#{KubernetesDeploy::VERSION}"
    exit
  end
  opts.parse!
  bindings = parser.parse
end

namespace = ARGV[0]
context = ARGV[1]
logger = KubernetesDeploy::FormattedLogger.build(namespace, context, verbose_prefix: verbose_log_prefix)

begin
  KubernetesDeploy::OptionsHelper.with_validated_template_dir(template_dir) do |dir|
    runner = KubernetesDeploy::DeployTask.new(
      namespace: namespace,
      context: context,
      current_sha: ENV["REVISION"],
      template_dir: dir,
      bindings: bindings,
      logger: logger,
      max_watch_seconds: max_watch_seconds
    )

    runner.run!(
      verify_result: !skip_wait,
      allow_protected_ns: allow_protected_ns,
      prune: prune
    )
  end
rescue KubernetesDeploy::DeploymentTimeoutError
  exit(70)
rescue KubernetesDeploy::FatalDeploymentError
  exit(1)
rescue KubernetesDeploy::OptionsHelper::OptionsError => e
  logger.error(e.message)
  exit(1)
end
