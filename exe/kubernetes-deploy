#!/usr/bin/env ruby
# frozen_string_literal: true

require 'krane/deploy_task'
require 'krane/options_helper'
require 'krane/bindings_parser'
require 'krane/label_selector'

require 'optparse'

skip_wait = false
template_dir = nil # deprecated
template_paths = []
allow_protected_ns = false
prune = true
bindings = {}
verbose_log_prefix = false
max_watch_seconds = nil
selector = nil

ARGV.options do |opts|
  parser = Krane::BindingsParser.new
  opts.on("--bindings=BINDINGS", "Expose additional variables to ERB templates " \
    "(format: k1=v1,k2=v2, JSON string or file (JSON or YAML) path prefixed by '@')") { |b| parser.add(b) }

  opts.on("--skip-wait", "Skip verification of non-priority-resource success (not recommended)") { skip_wait = true }
  prot_ns = Krane::DeployTask::PROTECTED_NAMESPACES.join(', ')
  opts.on("--allow-protected-ns", "Enable deploys to #{prot_ns}; requires --no-prune") { allow_protected_ns = true }
  opts.on("--no-prune", "Disable deletion of resources that do not appear in the template dir") { prune = false }
  opts.on("--template-dir=DIR", "Set the template dir (default: config/deploy/$ENVIRONMENT).") do |dir|
    template_dir = dir
  end
  opts.on("-f [PATHS]", Array, "comma separated list of template directories and/or filenames") do |paths|
    template_paths += paths
  end

  opts.on("--verbose-log-prefix", "Add [context][namespace] to the log prefix") { verbose_log_prefix = true }
  opts.on("--max-watch-seconds=seconds",
    "Timeout error is raised if it takes longer than the specified number of seconds") do |t|
    max_watch_seconds = t.to_i
  end
  opts.on("--selector=SELECTOR", "Ensure that all resources in your template dir match the given selector, " \
    "and restrict pruning to deployed resources it selects.  (format: k1=v1,k2=v2)") do |s|
    selector = Krane::LabelSelector.parse(s)
  end

  opts.on_tail("-h", "--help", "Print this help") do
    puts opts
    exit
  end
  opts.on_tail("-v", "--version", "Show version") do
    puts "v#{Krane::VERSION}"
    exit
  end
  opts.parse!
  bindings = parser.parse
end

namespace = ARGV[0]
context = ARGV[1]
logger = Krane::FormattedLogger.build(namespace, context, verbose_prefix: verbose_log_prefix)

# Deprecation path: this can be removed when --template-dir is fully replaced by -f
if template_dir && !template_paths.empty?
  logger.error("Error: --template-dir and -f flags cannot be combined")
  exit(1)
end
template_paths = [template_dir] if template_paths.empty? && template_dir

begin
  Krane::OptionsHelper.with_processed_template_paths(template_paths) do |paths|
    runner = Krane::DeployTask.new(
      namespace: namespace,
      context: context,
      current_sha: ENV["REVISION"],
      template_paths: paths,
      bindings: bindings,
      logger: logger,
      max_watch_seconds: max_watch_seconds,
      selector: selector,
      allow_globals: true
    )

    runner.run!(
      verify_result: !skip_wait,
      allow_protected_ns: allow_protected_ns,
      prune: prune
    )
  end
rescue Krane::DeploymentTimeoutError
  exit(70)
rescue Krane::FatalDeploymentError
  exit(1)
rescue Krane::OptionsHelper::OptionsError => e
  logger.error(e.message)
  exit(1)
end
