---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: shop-mover
    type: shop-mover
  name: shop-mover
  annotations:
    shipit.shopify.io/restart: 'false'
    krane.shopify.io/required-rollout: 'none'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 300
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0%
      maxUnavailable: 100%
  selector:
    matchLabels:
      name: shop-mover
      type: shop-mover
  
  # When provisioning a cluster, we don't want shop mover to start before it's ready.
  replicas: 0
  
  template:
    metadata:
      labels:
        name: shop-mover
        type: shop-mover
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days
      initContainers:
      - name: kafkabridge-setup # This creates the queue, in case kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: shop-mover
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["shop-mover"]
        resources:
          requests:
            memory: 3Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 4Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
        env:
          - name: POD_IDS
            value: "21,33,35,78,79,80,81,84,86,88,89,92,93,95,97,98,99,101,102,104,110,114,117,121,123,129,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: SEMIAN_SEMAPHORES_DISABLED
            value: "1"
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA
            value: "1"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env
data:
  magellan-location: gcp-us-east1
  location: gcp-us-east1
  cluster-name: core-us-east1-33
  smtp-relay: smtp.smtp-gke-production
  server-name: cloud1.shopify.io
  elasticsearch-url-pattern: https://%{pod_name}.gcp-us-east1.search.shopifysvc.com:9200
  memcached-page-cache-server-count: '6'
  memcached-identity-cache-server-count: '3'
  memcached-rails-cache-server-count: '3'

---
apiVersion: v1
kind: Service
metadata:
  name: web-headless
  labels:
    name: web-headless
    cloudplatform.shopify.io/disable-coredns: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 80
    name: http
    targetPort: 8080
  selector:
    name: web
    app: web

---
apiVersion: v1
kind: Service
metadata:
  name: web-perf-headless
  labels:
    name: web-perf-headless
    cloudplatform.shopify.io/disable-coredns: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 80
    name: http
    targetPort: 8080
  selector:
    name: web-perf
    app: web-perf




---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  labels:
    type: web
  annotations:
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 420
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      
      maxSurge: 0
      
      
      maxUnavailable: 15%
      
  selector:
    matchLabels:
      run: web
  template:
    metadata:
      labels:
        type: web
        name: web
        run: web
        app: web
    spec:
      hostIPC: true
      terminationGracePeriodSeconds: 80
      
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: web
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["unicorn"]
        ports:
        - containerPort: 3000
          name: http-server
        resources:
          requests:
            cpu: 8900m
            memory: 24Gi
          limits:

            memory: 34Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_IDS
            value: "21,22,33,34,35,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,101,102,104,108,110,112,114,117,121,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          
          - name: UNICORN_WORKERS
            value: "16"
          
          - name: ENV
            value: production
          - name: INTERNAL_PORT
            value: "3000"
          - name: EXTERNAL_PORT
            value: "3000"
          - name: PORT
            value: "3000"
          - name: HEALTHCHECK_PORT
            value: "3001"
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            #- CHOWN
            #- DAC_OVERRIDE
            #- FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            #- SETGID
            - SETFCAP
            - SETPCAP
            #- SETUID
            - SYS_CHROOT
          privileged: false
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]
      - name: nginx
        image: gcr.io/shopify-docker-images/cloud/nginx:1.23
        readinessProbe:
          httpGet:
            path: /services/ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 40
          periodSeconds: 5
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:

            memory: 500Mi
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVER_NAME
          valueFrom:
            configMapKeyRef:
              name: env
              key: server-name
        - name: CLIENT_MAX_BODY_SIZE
          value: "50M"
        - name: TEMPLATE_TYPE
          value: rails
        - name: WORKER_PROCESSES
          value: '1'
        - name: WORKER_CONNECTIONS
          value: '8192'
        - name: WEB_SERVICE_HOST
          value: 127.0.0.1:3000
        - name: HEALTHCHECK_ADDR
          value: 127.0.0.1:3001
        - name: PROXY_IGNORE_HEADERS
          value: "X-Accel-Redirect"
        - name: LOCATION
          valueFrom:
            configMapKeyRef:
              name: env
              key: location
        - name: STATSD_HOST
          value: 127.0.0.1
        - name: STATSD_PORT
          value: '8125'
        securityContext:
          capabilities:
            drop:
            - AUDIT_WRITE
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - SETGID
            - SETFCAP
            - SETPCAP
            - SETUID
            - SYS_CHROOT
          privileged: false
          runAsNonRoot: true
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]
      volumes:
          - name: kafka-client
            secret:
              secretName: kafka-client
              optional: true
          - name: elasticsearch-client
            secret:
              secretName: elasticsearch-client
          - name: ejson-keys
            secret:
              secretName: ejson-keys
          - name: gcp-service-account
            secret:
              secretName: gke-service-account
              optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-perf
  labels:
    type: web
  annotations:
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 420
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      
      maxSurge: 1
      
      
      maxUnavailable: 100%
      
  selector:
    matchLabels:
      run: web-perf
  template:
    metadata:
      labels:
        type: web
        name: web-perf
        run: web-perf
        app: web-perf
    spec:
      hostIPC: true
      terminationGracePeriodSeconds: 80
      
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: shopify.com/performance
                operator: In
                values:
                - "true"
      tolerations:
      - key: performance
        value: "true"
        effect: NoSchedule
      
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: web
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["unicorn"]
        ports:
        - containerPort: 3000
          name: http-server
        resources:
          requests:
            cpu: 8900m
            memory: 24Gi
          limits:

            memory: 34Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_IDS
            value: "21,22,33,34,35,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,101,102,104,108,110,112,114,117,121,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          
          - name: UNICORN_WORKERS
            value: "16"
          
          - name: ENV
            value: production
          - name: INTERNAL_PORT
            value: "3000"
          - name: EXTERNAL_PORT
            value: "3000"
          - name: PORT
            value: "3000"
          - name: HEALTHCHECK_PORT
            value: "3001"
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          
          - name: TRACE_PERCENTAGE
            value: "100"
          
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            #- CHOWN
            #- DAC_OVERRIDE
            #- FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            #- SETGID
            - SETFCAP
            - SETPCAP
            #- SETUID
            - SYS_CHROOT
          privileged: false
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]
      - name: nginx
        image: gcr.io/shopify-docker-images/cloud/nginx:1.23
        readinessProbe:
          httpGet:
            path: /services/ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 40
          periodSeconds: 5
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:

            memory: 500Mi
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVER_NAME
          valueFrom:
            configMapKeyRef:
              name: env
              key: server-name
        - name: CLIENT_MAX_BODY_SIZE
          value: "50M"
        - name: TEMPLATE_TYPE
          value: rails
        - name: WORKER_PROCESSES
          value: '1'
        - name: WORKER_CONNECTIONS
          value: '8192'
        - name: WEB_SERVICE_HOST
          value: 127.0.0.1:3000
        - name: HEALTHCHECK_ADDR
          value: 127.0.0.1:3001
        - name: PROXY_IGNORE_HEADERS
          value: "X-Accel-Redirect"
        - name: LOCATION
          valueFrom:
            configMapKeyRef:
              name: env
              key: location
        - name: STATSD_HOST
          value: 127.0.0.1
        - name: STATSD_PORT
          value: '8125'
        securityContext:
          capabilities:
            drop:
            - AUDIT_WRITE
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - SETGID
            - SETFCAP
            - SETPCAP
            - SETUID
            - SYS_CHROOT
          privileged: false
          runAsNonRoot: true
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]
      volumes:
          - name: kafka-client
            secret:
              secretName: kafka-client
              optional: true
          - name: elasticsearch-client
            secret:
              secretName: elasticsearch-client
          - name: ejson-keys
            secret:
              secretName: ejson-keys
          - name: gcp-service-account
            secret:
              secretName: gke-service-account
              optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-memory-perf
  labels:
    type: web
  annotations:
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 420
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      
      maxSurge: 1
      
      
      maxUnavailable: 100%
      
  selector:
    matchLabels:
      run: web-memory-perf
  template:
    metadata:
      labels:
        type: web
        name: web
        run: web-memory-perf
        app: web
    spec:
      hostIPC: true
      terminationGracePeriodSeconds: 80
      
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: web
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["unicorn"]
        ports:
        - containerPort: 3000
          name: http-server
        resources:
          requests:
            cpu: 8900m
            memory: 24Gi
          limits:

            memory: 34Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_IDS
            value: "21,22,33,34,35,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,101,102,104,108,110,112,114,117,121,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          
          - name: UNICORN_WORKERS
            value: "4"
          - name: UNICORN_MAX_PSS_MB
            value: "10000"
          
          - name: ENV
            value: production
          - name: INTERNAL_PORT
            value: "3000"
          - name: EXTERNAL_PORT
            value: "3000"
          - name: PORT
            value: "3000"
          - name: HEALTHCHECK_PORT
            value: "3001"
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            #- CHOWN
            #- DAC_OVERRIDE
            #- FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            #- SETGID
            - SETFCAP
            - SETPCAP
            #- SETUID
            - SYS_CHROOT
          privileged: false
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]
      - name: nginx
        image: gcr.io/shopify-docker-images/cloud/nginx:1.23
        readinessProbe:
          httpGet:
            path: /services/ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 40
          periodSeconds: 5
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:

            memory: 500Mi
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVER_NAME
          valueFrom:
            configMapKeyRef:
              name: env
              key: server-name
        - name: CLIENT_MAX_BODY_SIZE
          value: "50M"
        - name: TEMPLATE_TYPE
          value: rails
        - name: WORKER_PROCESSES
          value: '1'
        - name: WORKER_CONNECTIONS
          value: '8192'
        - name: WEB_SERVICE_HOST
          value: 127.0.0.1:3000
        - name: HEALTHCHECK_ADDR
          value: 127.0.0.1:3001
        - name: PROXY_IGNORE_HEADERS
          value: "X-Accel-Redirect"
        - name: LOCATION
          valueFrom:
            configMapKeyRef:
              name: env
              key: location
        - name: STATSD_HOST
          value: 127.0.0.1
        - name: STATSD_PORT
          value: '8125'
        securityContext:
          capabilities:
            drop:
            - AUDIT_WRITE
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - SETGID
            - SETFCAP
            - SETPCAP
            - SETUID
            - SYS_CHROOT
          privileged: false
          runAsNonRoot: true
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]
      volumes:
          - name: kafka-client
            secret:
              secretName: kafka-client
              optional: true
          - name: elasticsearch-client
            secret:
              secretName: elasticsearch-client
          - name: ejson-keys
            secret:
              secretName: ejson-keys
          - name: gcp-service-account
            secret:
              secretName: gke-service-account
              optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-next
  labels:
    type: web
  annotations:
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 420
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      
      maxSurge: 0
      
      
      maxUnavailable: 15%
      
  selector:
    matchLabels:
      run: web-next
  template:
    metadata:
      labels:
        type: web
        name: web
        run: web-next
        app: web
    spec:
      hostIPC: true
      terminationGracePeriodSeconds: 80
      
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: web
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["unicorn"]
        ports:
        - containerPort: 3000
          name: http-server
        resources:
          requests:
            cpu: 8900m
            memory: 24Gi
          limits:

            memory: 34Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_IDS
            value: "21,22,33,34,35,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,101,102,104,108,110,112,114,117,121,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          
          - name: UNICORN_WORKERS
            value: "16"
          
          - name: ENV
            value: production
          - name: INTERNAL_PORT
            value: "3000"
          - name: EXTERNAL_PORT
            value: "3000"
          - name: PORT
            value: "3000"
          - name: HEALTHCHECK_PORT
            value: "3001"
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            #- CHOWN
            #- DAC_OVERRIDE
            #- FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            #- SETGID
            - SETFCAP
            - SETPCAP
            #- SETUID
            - SYS_CHROOT
          privileged: false
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]
      - name: nginx
        image: gcr.io/shopify-docker-images/cloud/nginx:1.23
        readinessProbe:
          httpGet:
            path: /services/ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 40
          periodSeconds: 5
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:

            memory: 500Mi
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVER_NAME
          valueFrom:
            configMapKeyRef:
              name: env
              key: server-name
        - name: CLIENT_MAX_BODY_SIZE
          value: "50M"
        - name: TEMPLATE_TYPE
          value: rails
        - name: WORKER_PROCESSES
          value: '1'
        - name: WORKER_CONNECTIONS
          value: '8192'
        - name: WEB_SERVICE_HOST
          value: 127.0.0.1:3000
        - name: HEALTHCHECK_ADDR
          value: 127.0.0.1:3001
        - name: PROXY_IGNORE_HEADERS
          value: "X-Accel-Redirect"
        - name: LOCATION
          valueFrom:
            configMapKeyRef:
              name: env
              key: location
        - name: STATSD_HOST
          value: 127.0.0.1
        - name: STATSD_PORT
          value: '8125'
        securityContext:
          capabilities:
            drop:
            - AUDIT_WRITE
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - SETGID
            - SETFCAP
            - SETPCAP
            - SETUID
            - SYS_CHROOT
          privileged: false
          runAsNonRoot: true
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]
      volumes:
          - name: kafka-client
            secret:
              secretName: kafka-client
              optional: true
          - name: elasticsearch-client
            secret:
              secretName: elasticsearch-client
          - name: ejson-keys
            secret:
              secretName: ejson-keys
          - name: gcp-service-account
            secret:
              secretName: gke-service-account
              optional: true

---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: elasticsearch-client-cert
spec:
  commonName: es7
  duration: 120h0m0s
  issuerRef:
    kind: ClusterIssuer
    name: es-client-issuer
  renewBefore: 72h0m0s
  secretName: elasticsearch-client-cert









---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-low-1
    type: jobs
  name: jobs-low-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-low-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-low-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-low-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,low,realtime,default,checkout_completion",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-low'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'low'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-low-1-next
    type: jobs
  name: jobs-low-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-low-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-low-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-low-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,low,realtime,default,checkout_completion",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-low'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'low'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-low-2
    type: jobs
  name: jobs-low-2
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-low-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-low-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-low-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,low,realtime,default,checkout_completion",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-low'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'low'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-low-2-next
    type: jobs
  name: jobs-low-2-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-low-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-low-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-low-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,low,realtime,default,checkout_completion",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-low'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'low'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-low-3
    type: jobs
  name: jobs-low-3
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-low-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-low-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-low-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,low,realtime,default,checkout_completion",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-low'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'low'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-low-3-next
    type: jobs
  name: jobs-low-3-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-low-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-low-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-low-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,low,realtime,default,checkout_completion",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-low'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'low'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-low-4
    type: jobs
  name: jobs-low-4
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-low-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-low-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-low-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,low,realtime,default,checkout_completion",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-low'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'low'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-low-4-next
    type: jobs
  name: jobs-low-4-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-low-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-low-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-low-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,low,realtime,default,checkout_completion",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-low'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'low'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-low-5
    type: jobs
  name: jobs-low-5
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-low-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-low-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-low-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,low,realtime,default,checkout_completion",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-low'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'low'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-low-5-next
    type: jobs
  name: jobs-low-5-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-low-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-low-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-low-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,low,realtime,default,checkout_completion",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-low'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'low'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true












---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-default-1
    type: jobs
  name: jobs-default-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-default-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-default-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-default-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,default,realtime,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-default'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'default'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-default-1-next
    type: jobs
  name: jobs-default-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-default-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-default-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-default-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,default,realtime,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-default'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'default'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-default-2
    type: jobs
  name: jobs-default-2
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-default-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-default-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-default-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,default,realtime,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-default'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'default'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-default-2-next
    type: jobs
  name: jobs-default-2-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-default-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-default-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-default-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,default,realtime,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-default'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'default'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-default-3
    type: jobs
  name: jobs-default-3
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-default-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-default-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-default-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,default,realtime,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-default'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'default'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-default-3-next
    type: jobs
  name: jobs-default-3-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-default-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-default-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-default-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,default,realtime,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-default'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'default'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-default-4
    type: jobs
  name: jobs-default-4
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-default-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-default-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-default-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,default,realtime,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-default'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'default'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-default-4-next
    type: jobs
  name: jobs-default-4-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-default-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-default-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-default-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,default,realtime,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-default'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'default'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-default-5
    type: jobs
  name: jobs-default-5
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-default-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-default-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-default-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,default,realtime,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-default'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'default'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-default-5-next
    type: jobs
  name: jobs-default-5-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-default-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-default-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-default-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,default,realtime,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-default'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'default'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true












---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-realtime-1
    type: jobs
  name: jobs-realtime-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-realtime-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-realtime-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-realtime-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-realtime'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'realtime'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-realtime-1-next
    type: jobs
  name: jobs-realtime-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-realtime-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-realtime-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-realtime-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-realtime'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'realtime'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-realtime-2
    type: jobs
  name: jobs-realtime-2
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-realtime-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-realtime-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-realtime-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-realtime'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'realtime'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-realtime-2-next
    type: jobs
  name: jobs-realtime-2-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-realtime-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-realtime-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-realtime-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-realtime'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'realtime'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-realtime-3
    type: jobs
  name: jobs-realtime-3
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-realtime-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-realtime-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-realtime-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-realtime'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'realtime'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-realtime-3-next
    type: jobs
  name: jobs-realtime-3-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-realtime-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-realtime-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-realtime-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-realtime'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'realtime'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-realtime-4
    type: jobs
  name: jobs-realtime-4
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-realtime-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-realtime-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-realtime-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-realtime'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'realtime'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-realtime-4-next
    type: jobs
  name: jobs-realtime-4-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-realtime-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-realtime-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-realtime-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-realtime'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'realtime'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-realtime-5
    type: jobs
  name: jobs-realtime-5
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-realtime-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-realtime-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-realtime-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-realtime'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'realtime'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-realtime-5-next
    type: jobs
  name: jobs-realtime-5-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-realtime-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-realtime-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-realtime-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-realtime'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'realtime'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true












---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-payment-1
    type: jobs
  name: jobs-payment-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-payment-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-payment-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-payment-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,checkout_completion",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-payment'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'payment'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-payment-1-next
    type: jobs
  name: jobs-payment-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-payment-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-payment-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-payment-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,checkout_completion",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-payment'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'payment'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-payment-2
    type: jobs
  name: jobs-payment-2
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-payment-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-payment-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-payment-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,checkout_completion",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-payment'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'payment'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-payment-2-next
    type: jobs
  name: jobs-payment-2-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-payment-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-payment-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-payment-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,checkout_completion",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-payment'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'payment'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-payment-3
    type: jobs
  name: jobs-payment-3
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-payment-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-payment-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-payment-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,checkout_completion",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-payment'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'payment'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-payment-3-next
    type: jobs
  name: jobs-payment-3-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-payment-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-payment-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-payment-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,checkout_completion",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-payment'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'payment'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-payment-4
    type: jobs
  name: jobs-payment-4
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-payment-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-payment-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-payment-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,checkout_completion",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-payment'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'payment'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-payment-4-next
    type: jobs
  name: jobs-payment-4-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-payment-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-payment-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-payment-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,checkout_completion",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-payment'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'payment'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-payment-5
    type: jobs
  name: jobs-payment-5
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-payment-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-payment-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-payment-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,checkout_completion",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-payment'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'payment'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-payment-5-next
    type: jobs
  name: jobs-payment-5-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-payment-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-payment-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-payment-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,checkout_completion",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-payment'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'payment'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true












---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-maintenance-1
    type: jobs
  name: jobs-maintenance-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-maintenance-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-maintenance-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-maintenance-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,maintenance,maintenance_low,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-maintenance'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'maintenance'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-maintenance-1-next
    type: jobs
  name: jobs-maintenance-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-maintenance-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-maintenance-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-maintenance-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,maintenance,maintenance_low,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-maintenance'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'maintenance'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-maintenance-2
    type: jobs
  name: jobs-maintenance-2
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-maintenance-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-maintenance-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-maintenance-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,maintenance,maintenance_low,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-maintenance'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'maintenance'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-maintenance-2-next
    type: jobs
  name: jobs-maintenance-2-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-maintenance-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-maintenance-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-maintenance-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,maintenance,maintenance_low,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-maintenance'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'maintenance'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-maintenance-3
    type: jobs
  name: jobs-maintenance-3
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-maintenance-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-maintenance-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-maintenance-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,maintenance,maintenance_low,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-maintenance'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'maintenance'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-maintenance-3-next
    type: jobs
  name: jobs-maintenance-3-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-maintenance-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-maintenance-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-maintenance-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,maintenance,maintenance_low,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-maintenance'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'maintenance'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-maintenance-4
    type: jobs
  name: jobs-maintenance-4
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-maintenance-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-maintenance-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-maintenance-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,maintenance,maintenance_low,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-maintenance'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'maintenance'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-maintenance-4-next
    type: jobs
  name: jobs-maintenance-4-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-maintenance-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-maintenance-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-maintenance-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,maintenance,maintenance_low,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-maintenance'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'maintenance'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-maintenance-5
    type: jobs
  name: jobs-maintenance-5
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-maintenance-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-maintenance-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-maintenance-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,maintenance,maintenance_low,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-maintenance'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'maintenance'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-maintenance-5-next
    type: jobs
  name: jobs-maintenance-5-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-maintenance-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-maintenance-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-maintenance-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,maintenance,maintenance_low,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-maintenance'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'maintenance'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true












---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-shipping-rates-1
    type: jobs
  name: jobs-shipping-rates-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-shipping-rates-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-shipping-rates-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-shipping-rates-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "shipping_rates,realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-shipping-rates'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'shipping-rates'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-shipping-rates-1-next
    type: jobs
  name: jobs-shipping-rates-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-shipping-rates-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-shipping-rates-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-shipping-rates-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "shipping_rates,realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-shipping-rates'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'shipping-rates'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-shipping-rates-2
    type: jobs
  name: jobs-shipping-rates-2
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-shipping-rates-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-shipping-rates-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-shipping-rates-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "shipping_rates,realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-shipping-rates'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'shipping-rates'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-shipping-rates-2-next
    type: jobs
  name: jobs-shipping-rates-2-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-shipping-rates-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-shipping-rates-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-shipping-rates-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "shipping_rates,realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-shipping-rates'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'shipping-rates'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-shipping-rates-3
    type: jobs
  name: jobs-shipping-rates-3
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-shipping-rates-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-shipping-rates-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-shipping-rates-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "shipping_rates,realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-shipping-rates'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'shipping-rates'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-shipping-rates-3-next
    type: jobs
  name: jobs-shipping-rates-3-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-shipping-rates-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-shipping-rates-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-shipping-rates-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "shipping_rates,realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-shipping-rates'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'shipping-rates'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-shipping-rates-4
    type: jobs
  name: jobs-shipping-rates-4
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-shipping-rates-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-shipping-rates-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-shipping-rates-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "shipping_rates,realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-shipping-rates'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'shipping-rates'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-shipping-rates-4-next
    type: jobs
  name: jobs-shipping-rates-4-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-shipping-rates-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-shipping-rates-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-shipping-rates-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "shipping_rates,realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-shipping-rates'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'shipping-rates'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-shipping-rates-5
    type: jobs
  name: jobs-shipping-rates-5
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-shipping-rates-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-shipping-rates-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-shipping-rates-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "shipping_rates,realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-shipping-rates'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'shipping-rates'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-shipping-rates-5-next
    type: jobs
  name: jobs-shipping-rates-5-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-shipping-rates-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-shipping-rates-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-shipping-rates-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "shipping_rates,realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-shipping-rates'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'shipping-rates'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true












---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-elasticsearch-1
    type: jobs
  name: jobs-elasticsearch-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-elasticsearch-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-elasticsearch-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-elasticsearch-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,elasticsearch,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-elasticsearch'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'elasticsearch'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-elasticsearch-1-next
    type: jobs
  name: jobs-elasticsearch-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-elasticsearch-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-elasticsearch-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-elasticsearch-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,elasticsearch,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-elasticsearch'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'elasticsearch'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-elasticsearch-2
    type: jobs
  name: jobs-elasticsearch-2
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-elasticsearch-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-elasticsearch-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-elasticsearch-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,elasticsearch,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-elasticsearch'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'elasticsearch'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-elasticsearch-2-next
    type: jobs
  name: jobs-elasticsearch-2-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-elasticsearch-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-elasticsearch-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-elasticsearch-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,elasticsearch,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-elasticsearch'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'elasticsearch'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-elasticsearch-3
    type: jobs
  name: jobs-elasticsearch-3
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-elasticsearch-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-elasticsearch-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-elasticsearch-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,elasticsearch,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-elasticsearch'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'elasticsearch'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-elasticsearch-3-next
    type: jobs
  name: jobs-elasticsearch-3-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-elasticsearch-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-elasticsearch-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-elasticsearch-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,elasticsearch,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-elasticsearch'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'elasticsearch'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-elasticsearch-4
    type: jobs
  name: jobs-elasticsearch-4
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-elasticsearch-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-elasticsearch-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-elasticsearch-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,elasticsearch,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-elasticsearch'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'elasticsearch'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-elasticsearch-4-next
    type: jobs
  name: jobs-elasticsearch-4-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-elasticsearch-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-elasticsearch-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-elasticsearch-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,elasticsearch,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-elasticsearch'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'elasticsearch'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-elasticsearch-5
    type: jobs
  name: jobs-elasticsearch-5
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-elasticsearch-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-elasticsearch-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-elasticsearch-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,elasticsearch,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-elasticsearch'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'elasticsearch'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-elasticsearch-5-next
    type: jobs
  name: jobs-elasticsearch-5-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-elasticsearch-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-elasticsearch-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-elasticsearch-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,elasticsearch,realtime,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-elasticsearch'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'elasticsearch'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true












---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-slo-1
    type: jobs
  name: jobs-slo-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-slo-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-slo-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-slo-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,realtime,shipping_rates,default,checkout_completion,low,elasticsearch,maintenance,maintenance_low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-slo'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'slo'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-slo-1-next
    type: jobs
  name: jobs-slo-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-slo-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-slo-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-slo-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,realtime,shipping_rates,default,checkout_completion,low,elasticsearch,maintenance,maintenance_low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-slo'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'slo'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-slo-2
    type: jobs
  name: jobs-slo-2
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-slo-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-slo-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-slo-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,realtime,shipping_rates,default,checkout_completion,low,elasticsearch,maintenance,maintenance_low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-slo'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'slo'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-slo-2-next
    type: jobs
  name: jobs-slo-2-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-slo-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-slo-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-slo-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,realtime,shipping_rates,default,checkout_completion,low,elasticsearch,maintenance,maintenance_low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-slo'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'slo'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-slo-3
    type: jobs
  name: jobs-slo-3
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-slo-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-slo-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-slo-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,realtime,shipping_rates,default,checkout_completion,low,elasticsearch,maintenance,maintenance_low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-slo'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'slo'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-slo-3-next
    type: jobs
  name: jobs-slo-3-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-slo-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-slo-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-slo-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,realtime,shipping_rates,default,checkout_completion,low,elasticsearch,maintenance,maintenance_low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-slo'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'slo'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-slo-4
    type: jobs
  name: jobs-slo-4
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-slo-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-slo-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-slo-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,realtime,shipping_rates,default,checkout_completion,low,elasticsearch,maintenance,maintenance_low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-slo'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'slo'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-slo-4-next
    type: jobs
  name: jobs-slo-4-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-slo-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-slo-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-slo-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,realtime,shipping_rates,default,checkout_completion,low,elasticsearch,maintenance,maintenance_low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-slo'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'slo'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-slo-5
    type: jobs
  name: jobs-slo-5
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-slo-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-slo-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-slo-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,realtime,shipping_rates,default,checkout_completion,low,elasticsearch,maintenance,maintenance_low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-slo'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'slo'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-slo-5-next
    type: jobs
  name: jobs-slo-5-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-slo-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-slo-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-slo-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "payment,realtime,shipping_rates,default,checkout_completion,low,elasticsearch,maintenance,maintenance_low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-slo'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'slo'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true












---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-common-1
    type: jobs
  name: jobs-common-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-common-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-common-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-common-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,21,22,33,34,35,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,101,102,104,108,110,112,114,117,121,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209",
          "--worker-class", "::Podding::Resque::ExperimentalWorker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,21,22,33,34,35,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,101,102,104,108,110,112,114,117,121,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-common'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'common'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-common-1-next
    type: jobs
  name: jobs-common-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-common-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-common-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-common-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "realtime,payment,default,checkout_completion,low",
          "--workers", "8",
          "--pod-ids", "-1,21,22,33,34,35,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,101,102,104,108,110,112,114,117,121,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209",
          "--worker-class", "::Podding::Resque::ExperimentalWorker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,21,22,33,34,35,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,101,102,104,108,110,112,114,117,121,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-common'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'common'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true




































---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-canary-1
    type: jobs
  name: jobs-canary-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '50%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-canary-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-canary-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-canary-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-canary'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA_V2
            value: "1"

          - name: WORKER_GROUP_NAME
            value: 'canary'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-canary-1-next
    type: jobs
  name: jobs-canary-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '50%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-canary-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-canary-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-canary-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "low",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-canary'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA_V2
            value: "1"

          - name: WORKER_GROUP_NAME
            value: 'canary'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-canary-2
    type: jobs
  name: jobs-canary-2
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '50%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-canary-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-canary-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-canary-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-canary'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA_V2
            value: "1"

          - name: WORKER_GROUP_NAME
            value: 'canary'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-canary-2-next
    type: jobs
  name: jobs-canary-2-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '50%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-canary-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-canary-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-canary-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "low",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-canary'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA_V2
            value: "1"

          - name: WORKER_GROUP_NAME
            value: 'canary'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-canary-3
    type: jobs
  name: jobs-canary-3
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '50%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-canary-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-canary-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-canary-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-canary'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA_V2
            value: "1"

          - name: WORKER_GROUP_NAME
            value: 'canary'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-canary-3-next
    type: jobs
  name: jobs-canary-3-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '50%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-canary-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-canary-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-canary-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "low",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-canary'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA_V2
            value: "1"

          - name: WORKER_GROUP_NAME
            value: 'canary'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-canary-4
    type: jobs
  name: jobs-canary-4
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '50%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-canary-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-canary-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-canary-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-canary'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA_V2
            value: "1"

          - name: WORKER_GROUP_NAME
            value: 'canary'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-canary-4-next
    type: jobs
  name: jobs-canary-4-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '50%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-canary-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-canary-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-canary-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "low",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-canary'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA_V2
            value: "1"

          - name: WORKER_GROUP_NAME
            value: 'canary'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-canary-5
    type: jobs
  name: jobs-canary-5
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '50%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-canary-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-canary-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-canary-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-canary'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA_V2
            value: "1"

          - name: WORKER_GROUP_NAME
            value: 'canary'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-canary-5-next
    type: jobs
  name: jobs-canary-5-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '50%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-canary-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-canary-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 240 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-canary-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "low",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-canary'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'


          - name: RAILS_LOG_TO_STDOUT_AND_KAFKA_V2
            value: "1"

          - name: WORKER_GROUP_NAME
            value: 'canary'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true












---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-lhm-1
    type: jobs
  name: jobs-lhm-1
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-lhm-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-lhm-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-lhm-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "lhm",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-lhm'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'

          - name: SEMIAN_DISABLED
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'lhm'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-lhm-1-next
    type: jobs
  name: jobs-lhm-1-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-lhm-1
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-lhm-1
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-lhm-1
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "lhm",
          "--workers", "8",
          "--pod-ids", "-1,33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "33,35,41,44,45,46,58,63,68,69,74,80,82,87,88,128,134,151,154,164,173,177,180,181,189,195,196,204,207,208"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-lhm'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'

          - name: SEMIAN_DISABLED
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'lhm'
          - name: WORKER_GROUP_INDEX
            value: '1'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-lhm-2
    type: jobs
  name: jobs-lhm-2
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-lhm-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-lhm-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-lhm-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "lhm",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-lhm'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'

          - name: SEMIAN_DISABLED
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'lhm'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-lhm-2-next
    type: jobs
  name: jobs-lhm-2-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-lhm-2
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-lhm-2
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-lhm-2
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "lhm",
          "--workers", "8",
          "--pod-ids", "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "43,50,55,61,64,66,77,78,79,89,92,98,127,131,132,148,156,157,165,167,171,179,182,183,192,198,201,202,205,206"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-lhm'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'

          - name: SEMIAN_DISABLED
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'lhm'
          - name: WORKER_GROUP_INDEX
            value: '2'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-lhm-3
    type: jobs
  name: jobs-lhm-3
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-lhm-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-lhm-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-lhm-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "lhm",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-lhm'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'

          - name: SEMIAN_DISABLED
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'lhm'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-lhm-3-next
    type: jobs
  name: jobs-lhm-3-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-lhm-3
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-lhm-3
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-lhm-3
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "lhm",
          "--workers", "8",
          "--pod-ids", "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "42,48,51,52,53,57,62,81,83,86,95,102,104,112,114,138,152,153,155,159,160,161,162,166,174,185,186,197,199,200"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-lhm'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'

          - name: SEMIAN_DISABLED
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'lhm'
          - name: WORKER_GROUP_INDEX
            value: '3'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-lhm-4
    type: jobs
  name: jobs-lhm-4
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-lhm-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-lhm-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-lhm-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "lhm",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-lhm'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'

          - name: SEMIAN_DISABLED
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'lhm'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-lhm-4-next
    type: jobs
  name: jobs-lhm-4-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-lhm-4
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-lhm-4
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-lhm-4
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "lhm",
          "--workers", "8",
          "--pod-ids", "22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "-1,22,54,65,70,71,72,84,93,101,108,117,121,126,130,136,140,149,150,163,169,170,172,176,184,187,188,191,193,194"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-lhm'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'

          - name: SEMIAN_DISABLED
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'lhm'
          - name: WORKER_GROUP_INDEX
            value: '4'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true










---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-lhm-5
    type: jobs
  name: jobs-lhm-5
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-lhm-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-lhm-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-lhm-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "lhm",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-lhm'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'

          - name: SEMIAN_DISABLED
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'lhm'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: jobs-lhm-5-next
    type: jobs
  name: jobs-lhm-5-next
  annotations:
    shipit.shopify.io/restart: 'true'
    cloudplatform.shopify.io/scaling-strategy: external
    
    krane.shopify.io/required-rollout: '75%'
    
spec:
  progressDeadlineSeconds: 900
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    
  
  # When provisioning a cluster, we don't want the jobs to start before it's ready.
  replicas: 0
  
  selector:
    matchLabels:
      type: jobs
      name: jobs-lhm-5
  template:
    metadata:
      labels:
        type: jobs
        name: jobs-lhm-5
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      terminationGracePeriodSeconds: 604800 # 7 days limit for LHMs
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: jobs-lhm-5
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: [
          "job-worker",
          "--queues",
          "lhm",
          "--workers", "8",
          "--pod-ids", "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209",
          "--worker-class", "::Podding::Resque::Worker"
        ]
        readinessProbe:
          exec:
            command:
              - "bin/job-worker-readiness-probe"
              - "8"
          initialDelaySeconds: 90
        lifecycle:
          preStop:
            exec:
              command: ["touch","/tmp/pod-terminated"]
        resources:
          requests:
            cpu: 2500m
            memory: 10.0Gi
          limits:
            cpu: 5000m
            memory: 14.0Gi
        volumeMounts:
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: elasticsearch-client
            mountPath: /elasticsearch-client
            readOnly: true
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: SMTP_SERVICE_HOST
            valueFrom:
              configMapKeyRef:
                name: env
                key: smtp-relay
          - name: POD_IDS
            value: "21,34,47,56,59,60,73,76,85,96,97,99,110,123,129,133,135,137,139,158,168,175,178,190,203,209"
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: RAILS_ENV
            value: "production"
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: ELASTICSEARCH_CLIENT_CERT
            value: "/elasticsearch-client/tls.crt"
          - name: ELASTICSEARCH_CLIENT_KEY
            value: "/elasticsearch-client/tls.key"
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: RESQUE_WORKER_NAME
            value: 'resque-lhm'
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: TRACE_PROXY_ADDR
            value: http://$(HOST_IP):8096/
          - name: TRACE_PERCENTAGE
            value: '5'
          - name: RESQUE_SKIP_LOADING_CONTROLLERS
            value: '1'

          - name: SEMIAN_DISABLED
            value: '1'


          - name: WORKER_GROUP_NAME
            value: 'lhm'
          - name: WORKER_GROUP_INDEX
            value: '5'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"
          - name: JOBS_MAX_SLEEP_SECONDS_SHIPPING_RATES
            value: '2'
          - name: JOBS_MAX_SLEEP_SECONDS_DEFAULT
            value: '5'
          - name: JOBS_MAX_SLEEP_SECONDS_LOW
            value: '30'
          - name: JOBS_MAX_SLEEP_SECONDS_CHECKOUT_COMPLETION
            value: '30'

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - KILL
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
          privileged: false
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: elasticsearch-client
          secret:
            secretName: elasticsearch-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true





---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-podm"
    type: jobs-scheduler
  name: "resque-scheduler-podm"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-podm"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-podm"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "-1"
          
          - name: POD_IDS
            value: "21,22,33,34,35,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,101,102,104,108,110,112,114,117,121,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod21"
    type: jobs-scheduler
  name: "resque-scheduler-pod21"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod21"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod21"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "21"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod22"
    type: jobs-scheduler
  name: "resque-scheduler-pod22"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod22"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod22"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "22"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod33"
    type: jobs-scheduler
  name: "resque-scheduler-pod33"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod33"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod33"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "33"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod34"
    type: jobs-scheduler
  name: "resque-scheduler-pod34"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod34"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod34"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "34"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod35"
    type: jobs-scheduler
  name: "resque-scheduler-pod35"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod35"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod35"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "35"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod41"
    type: jobs-scheduler
  name: "resque-scheduler-pod41"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod41"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod41"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "41"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod42"
    type: jobs-scheduler
  name: "resque-scheduler-pod42"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod42"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod42"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "42"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod43"
    type: jobs-scheduler
  name: "resque-scheduler-pod43"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod43"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod43"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "43"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod44"
    type: jobs-scheduler
  name: "resque-scheduler-pod44"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod44"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod44"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "44"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod45"
    type: jobs-scheduler
  name: "resque-scheduler-pod45"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod45"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod45"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "45"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod46"
    type: jobs-scheduler
  name: "resque-scheduler-pod46"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod46"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod46"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "46"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod47"
    type: jobs-scheduler
  name: "resque-scheduler-pod47"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod47"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod47"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "47"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod48"
    type: jobs-scheduler
  name: "resque-scheduler-pod48"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod48"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod48"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "48"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod50"
    type: jobs-scheduler
  name: "resque-scheduler-pod50"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod50"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod50"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "50"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod51"
    type: jobs-scheduler
  name: "resque-scheduler-pod51"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod51"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod51"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "51"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod52"
    type: jobs-scheduler
  name: "resque-scheduler-pod52"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod52"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod52"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "52"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod53"
    type: jobs-scheduler
  name: "resque-scheduler-pod53"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod53"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod53"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "53"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod54"
    type: jobs-scheduler
  name: "resque-scheduler-pod54"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod54"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod54"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "54"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod55"
    type: jobs-scheduler
  name: "resque-scheduler-pod55"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod55"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod55"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "55"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod56"
    type: jobs-scheduler
  name: "resque-scheduler-pod56"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod56"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod56"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "56"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod57"
    type: jobs-scheduler
  name: "resque-scheduler-pod57"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod57"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod57"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "57"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod58"
    type: jobs-scheduler
  name: "resque-scheduler-pod58"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod58"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod58"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "58"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod59"
    type: jobs-scheduler
  name: "resque-scheduler-pod59"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod59"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod59"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "59"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod60"
    type: jobs-scheduler
  name: "resque-scheduler-pod60"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod60"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod60"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "60"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod61"
    type: jobs-scheduler
  name: "resque-scheduler-pod61"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod61"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod61"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "61"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod62"
    type: jobs-scheduler
  name: "resque-scheduler-pod62"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod62"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod62"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "62"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod63"
    type: jobs-scheduler
  name: "resque-scheduler-pod63"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod63"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod63"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "63"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod64"
    type: jobs-scheduler
  name: "resque-scheduler-pod64"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod64"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod64"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "64"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod65"
    type: jobs-scheduler
  name: "resque-scheduler-pod65"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod65"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod65"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "65"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod66"
    type: jobs-scheduler
  name: "resque-scheduler-pod66"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod66"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod66"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "66"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod68"
    type: jobs-scheduler
  name: "resque-scheduler-pod68"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod68"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod68"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "68"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod69"
    type: jobs-scheduler
  name: "resque-scheduler-pod69"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod69"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod69"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "69"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod70"
    type: jobs-scheduler
  name: "resque-scheduler-pod70"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod70"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod70"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "70"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod71"
    type: jobs-scheduler
  name: "resque-scheduler-pod71"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod71"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod71"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "71"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod72"
    type: jobs-scheduler
  name: "resque-scheduler-pod72"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod72"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod72"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "72"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod73"
    type: jobs-scheduler
  name: "resque-scheduler-pod73"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod73"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod73"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "73"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod74"
    type: jobs-scheduler
  name: "resque-scheduler-pod74"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod74"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod74"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "74"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod76"
    type: jobs-scheduler
  name: "resque-scheduler-pod76"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod76"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod76"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "76"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod77"
    type: jobs-scheduler
  name: "resque-scheduler-pod77"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod77"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod77"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "77"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod78"
    type: jobs-scheduler
  name: "resque-scheduler-pod78"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod78"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod78"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "78"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod79"
    type: jobs-scheduler
  name: "resque-scheduler-pod79"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod79"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod79"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "79"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod80"
    type: jobs-scheduler
  name: "resque-scheduler-pod80"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod80"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod80"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "80"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod81"
    type: jobs-scheduler
  name: "resque-scheduler-pod81"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod81"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod81"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "81"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod82"
    type: jobs-scheduler
  name: "resque-scheduler-pod82"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod82"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod82"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "82"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod83"
    type: jobs-scheduler
  name: "resque-scheduler-pod83"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod83"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod83"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "83"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod84"
    type: jobs-scheduler
  name: "resque-scheduler-pod84"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod84"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod84"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "84"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod85"
    type: jobs-scheduler
  name: "resque-scheduler-pod85"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod85"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod85"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "85"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod86"
    type: jobs-scheduler
  name: "resque-scheduler-pod86"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod86"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod86"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "86"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod87"
    type: jobs-scheduler
  name: "resque-scheduler-pod87"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod87"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod87"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "87"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod88"
    type: jobs-scheduler
  name: "resque-scheduler-pod88"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod88"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod88"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "88"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod89"
    type: jobs-scheduler
  name: "resque-scheduler-pod89"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod89"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod89"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "89"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod92"
    type: jobs-scheduler
  name: "resque-scheduler-pod92"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod92"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod92"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "92"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod93"
    type: jobs-scheduler
  name: "resque-scheduler-pod93"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod93"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod93"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "93"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod95"
    type: jobs-scheduler
  name: "resque-scheduler-pod95"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod95"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod95"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "95"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod96"
    type: jobs-scheduler
  name: "resque-scheduler-pod96"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod96"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod96"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "96"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod97"
    type: jobs-scheduler
  name: "resque-scheduler-pod97"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod97"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod97"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "97"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod98"
    type: jobs-scheduler
  name: "resque-scheduler-pod98"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod98"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod98"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "98"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod99"
    type: jobs-scheduler
  name: "resque-scheduler-pod99"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod99"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod99"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "99"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod101"
    type: jobs-scheduler
  name: "resque-scheduler-pod101"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod101"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod101"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "101"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod102"
    type: jobs-scheduler
  name: "resque-scheduler-pod102"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod102"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod102"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "102"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod104"
    type: jobs-scheduler
  name: "resque-scheduler-pod104"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod104"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod104"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "104"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod108"
    type: jobs-scheduler
  name: "resque-scheduler-pod108"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod108"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod108"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "108"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod110"
    type: jobs-scheduler
  name: "resque-scheduler-pod110"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod110"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod110"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "110"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod112"
    type: jobs-scheduler
  name: "resque-scheduler-pod112"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod112"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod112"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "112"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod114"
    type: jobs-scheduler
  name: "resque-scheduler-pod114"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod114"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod114"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "114"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod117"
    type: jobs-scheduler
  name: "resque-scheduler-pod117"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod117"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod117"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "117"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod121"
    type: jobs-scheduler
  name: "resque-scheduler-pod121"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod121"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod121"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "121"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod123"
    type: jobs-scheduler
  name: "resque-scheduler-pod123"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod123"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod123"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "123"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod126"
    type: jobs-scheduler
  name: "resque-scheduler-pod126"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod126"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod126"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "126"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod127"
    type: jobs-scheduler
  name: "resque-scheduler-pod127"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod127"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod127"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "127"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod128"
    type: jobs-scheduler
  name: "resque-scheduler-pod128"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod128"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod128"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "128"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod129"
    type: jobs-scheduler
  name: "resque-scheduler-pod129"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod129"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod129"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "129"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod130"
    type: jobs-scheduler
  name: "resque-scheduler-pod130"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod130"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod130"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "130"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod131"
    type: jobs-scheduler
  name: "resque-scheduler-pod131"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod131"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod131"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "131"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod132"
    type: jobs-scheduler
  name: "resque-scheduler-pod132"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod132"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod132"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "132"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod133"
    type: jobs-scheduler
  name: "resque-scheduler-pod133"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod133"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod133"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "133"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod134"
    type: jobs-scheduler
  name: "resque-scheduler-pod134"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod134"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod134"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "134"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod135"
    type: jobs-scheduler
  name: "resque-scheduler-pod135"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod135"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod135"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "135"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod136"
    type: jobs-scheduler
  name: "resque-scheduler-pod136"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod136"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod136"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "136"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod137"
    type: jobs-scheduler
  name: "resque-scheduler-pod137"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod137"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod137"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "137"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod138"
    type: jobs-scheduler
  name: "resque-scheduler-pod138"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod138"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod138"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "138"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod139"
    type: jobs-scheduler
  name: "resque-scheduler-pod139"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod139"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod139"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "139"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod140"
    type: jobs-scheduler
  name: "resque-scheduler-pod140"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod140"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod140"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "140"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod148"
    type: jobs-scheduler
  name: "resque-scheduler-pod148"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod148"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod148"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "148"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod149"
    type: jobs-scheduler
  name: "resque-scheduler-pod149"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod149"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod149"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "149"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod150"
    type: jobs-scheduler
  name: "resque-scheduler-pod150"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod150"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod150"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "150"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod151"
    type: jobs-scheduler
  name: "resque-scheduler-pod151"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod151"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod151"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "151"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod152"
    type: jobs-scheduler
  name: "resque-scheduler-pod152"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod152"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod152"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "152"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod153"
    type: jobs-scheduler
  name: "resque-scheduler-pod153"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod153"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod153"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "153"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod154"
    type: jobs-scheduler
  name: "resque-scheduler-pod154"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod154"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod154"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "154"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod155"
    type: jobs-scheduler
  name: "resque-scheduler-pod155"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod155"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod155"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "155"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod156"
    type: jobs-scheduler
  name: "resque-scheduler-pod156"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod156"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod156"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "156"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod157"
    type: jobs-scheduler
  name: "resque-scheduler-pod157"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod157"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod157"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "157"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod158"
    type: jobs-scheduler
  name: "resque-scheduler-pod158"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod158"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod158"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "158"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod159"
    type: jobs-scheduler
  name: "resque-scheduler-pod159"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod159"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod159"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "159"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod160"
    type: jobs-scheduler
  name: "resque-scheduler-pod160"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod160"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod160"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "160"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod161"
    type: jobs-scheduler
  name: "resque-scheduler-pod161"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod161"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod161"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "161"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod162"
    type: jobs-scheduler
  name: "resque-scheduler-pod162"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod162"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod162"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "162"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod163"
    type: jobs-scheduler
  name: "resque-scheduler-pod163"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod163"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod163"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "163"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod164"
    type: jobs-scheduler
  name: "resque-scheduler-pod164"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod164"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod164"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "164"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod165"
    type: jobs-scheduler
  name: "resque-scheduler-pod165"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod165"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod165"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "165"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod166"
    type: jobs-scheduler
  name: "resque-scheduler-pod166"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod166"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod166"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "166"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod167"
    type: jobs-scheduler
  name: "resque-scheduler-pod167"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod167"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod167"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "167"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod168"
    type: jobs-scheduler
  name: "resque-scheduler-pod168"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod168"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod168"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "168"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod169"
    type: jobs-scheduler
  name: "resque-scheduler-pod169"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod169"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod169"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "169"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod170"
    type: jobs-scheduler
  name: "resque-scheduler-pod170"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod170"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod170"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "170"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod171"
    type: jobs-scheduler
  name: "resque-scheduler-pod171"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod171"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod171"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "171"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod172"
    type: jobs-scheduler
  name: "resque-scheduler-pod172"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod172"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod172"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "172"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod173"
    type: jobs-scheduler
  name: "resque-scheduler-pod173"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod173"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod173"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "173"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod174"
    type: jobs-scheduler
  name: "resque-scheduler-pod174"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod174"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod174"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "174"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod175"
    type: jobs-scheduler
  name: "resque-scheduler-pod175"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod175"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod175"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "175"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod176"
    type: jobs-scheduler
  name: "resque-scheduler-pod176"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod176"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod176"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "176"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod177"
    type: jobs-scheduler
  name: "resque-scheduler-pod177"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod177"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod177"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "177"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod178"
    type: jobs-scheduler
  name: "resque-scheduler-pod178"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod178"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod178"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "178"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod179"
    type: jobs-scheduler
  name: "resque-scheduler-pod179"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod179"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod179"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "179"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod180"
    type: jobs-scheduler
  name: "resque-scheduler-pod180"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod180"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod180"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "180"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod181"
    type: jobs-scheduler
  name: "resque-scheduler-pod181"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod181"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod181"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "181"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod182"
    type: jobs-scheduler
  name: "resque-scheduler-pod182"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod182"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod182"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "182"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod183"
    type: jobs-scheduler
  name: "resque-scheduler-pod183"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod183"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod183"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "183"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod184"
    type: jobs-scheduler
  name: "resque-scheduler-pod184"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod184"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod184"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "184"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod185"
    type: jobs-scheduler
  name: "resque-scheduler-pod185"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod185"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod185"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "185"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod186"
    type: jobs-scheduler
  name: "resque-scheduler-pod186"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod186"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod186"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "186"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod187"
    type: jobs-scheduler
  name: "resque-scheduler-pod187"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod187"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod187"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "187"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod188"
    type: jobs-scheduler
  name: "resque-scheduler-pod188"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod188"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod188"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "188"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod189"
    type: jobs-scheduler
  name: "resque-scheduler-pod189"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod189"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod189"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "189"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod190"
    type: jobs-scheduler
  name: "resque-scheduler-pod190"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod190"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod190"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "190"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod191"
    type: jobs-scheduler
  name: "resque-scheduler-pod191"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod191"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod191"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "191"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod192"
    type: jobs-scheduler
  name: "resque-scheduler-pod192"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod192"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod192"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "192"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod193"
    type: jobs-scheduler
  name: "resque-scheduler-pod193"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod193"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod193"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "193"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod194"
    type: jobs-scheduler
  name: "resque-scheduler-pod194"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod194"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod194"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "194"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod195"
    type: jobs-scheduler
  name: "resque-scheduler-pod195"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod195"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod195"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "195"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod196"
    type: jobs-scheduler
  name: "resque-scheduler-pod196"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod196"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod196"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "196"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod197"
    type: jobs-scheduler
  name: "resque-scheduler-pod197"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod197"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod197"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "197"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod198"
    type: jobs-scheduler
  name: "resque-scheduler-pod198"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod198"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod198"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "198"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod199"
    type: jobs-scheduler
  name: "resque-scheduler-pod199"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod199"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod199"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "199"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod200"
    type: jobs-scheduler
  name: "resque-scheduler-pod200"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod200"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod200"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "200"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod201"
    type: jobs-scheduler
  name: "resque-scheduler-pod201"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod201"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod201"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "201"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod202"
    type: jobs-scheduler
  name: "resque-scheduler-pod202"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod202"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod202"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "202"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod203"
    type: jobs-scheduler
  name: "resque-scheduler-pod203"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod203"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod203"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "203"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod204"
    type: jobs-scheduler
  name: "resque-scheduler-pod204"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod204"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod204"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "204"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod205"
    type: jobs-scheduler
  name: "resque-scheduler-pod205"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod205"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod205"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "205"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod206"
    type: jobs-scheduler
  name: "resque-scheduler-pod206"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod206"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod206"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "206"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod207"
    type: jobs-scheduler
  name: "resque-scheduler-pod207"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod207"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod207"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "207"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod208"
    type: jobs-scheduler
  name: "resque-scheduler-pod208"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod208"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod208"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "208"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: "resque-scheduler-pod209"
    type: jobs-scheduler
  name: "resque-scheduler-pod209"
  annotations:
    shopify.io/active-desired-replicas-per-cluster: '2'
    shipit.shopify.io/restart: 'true'
    krane.shopify.io/required-rollout: 'maxUnavailable'
    cloudplatform.shopify.io/scaling-strategy: external
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  
  replicas: 0
  
  selector:
    matchLabels:
      name: "resque-scheduler-pod209"
      type: resque-scheduler
  template:
    metadata:
      labels:
        name: "resque-scheduler-pod209"
        type: resque-scheduler
    spec:
      automountServiceAccountToken: false
      hostIPC: true
      initContainers:
      - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
        image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
        # XXX: These values should be kept in sync with what kafkabridge-core has
        - name: QUEUE_MAX
          value: "2147483647" # 2GB
        - name: MESSAGE_MAX
          value: "1048576"    # 1MB
        - name: SYSV_MQ_SIZE
          value: "8589934588" # 8GB
        securityContext:
          privileged: true
      containers:
      - name: resque-scheduler
        image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
        args: ["resque-scheduler"]
        readinessProbe:
          exec:
            command:
            - test
            -  -e
            - /tmp/resque_scheduler_started
            - -o
            - -e
            - /tmp/with_magellan_forever
          initialDelaySeconds: 40
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
          - name: ejson-keys
            mountPath: /key
            readOnly: true
          - name: kafka-client
            mountPath: /kafka-client
            readOnly: true
          - name: gcp-service-account
            mountPath: "/var/run/gcloud"
            readOnly: true
        env:
          - name: POD_ID
            value: "209"
          
          - name: JOBS_REDIS_PARTITION_COUNT_DATA
            value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
          - name: READY_CORE_CLUSTER_BY_LOCATION
            value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
          - name: PRIVACY_LEVEL
            value: "default"
          - name: FEATURE_SET
            value: "default"
          - name: MAGELLAN_URL
            value: http://magellan.magellan-production.svc.cluster.local.:8438
          - name: MAGELLAN_SERVICE_NAME
            value: production_shopify_pods
          - name: RAILS_ENV
            value: production
          - name: ELASTICSEARCH_URL_PATTERN
            valueFrom:
              configMapKeyRef:
                name: env
                key: elasticsearch-url-pattern
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: magellan-location
          - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-page-cache-server-count
          - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-identity-cache-server-count
          - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
            valueFrom:
              configMapKeyRef:
                name: env
                key: memcached-rails-cache-server-count
          - name: KUBE_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBE_LOCATION
            valueFrom:
              configMapKeyRef:
                name: env
                key: location
          - name: KUBE_CLUSTER
            valueFrom:
              configMapKeyRef:
                name: env
                key: cluster-name
          - name: KUBE_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ENV
            value: production
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: KAFKA_AGGREGATE_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: cloud-aggregate
          - name: KAFKA_REGIONAL_BROKERS
            valueFrom:
              configMapKeyRef:
                name: kafka-clusters
                key: local
          - name: KAFKA_CLIENT_CERT
            value: "/kafka-client/tls.crt"
          - name: KAFKA_CLIENT_KEY
            value: "/kafka-client/tls.key"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/run/gcloud/service_account.json
          - name: DEPLOY_STAGE
            value: "production"

          # Use the new Ruby StatsD client
          - name: STATSD_USE_NEW_CLIENT
            value: "1"

          # For now, these two variables will do nothing
          # Because StatsD is configured manually in config/environments/production.rb
          - name: STATSD_IMPLEMENTATION
            value: "datadog"
          - name: STATSD_ADDR
            value: "$(HOST_IP):8125"

        securityContext:
          capabilities:
            add:
            - IPC_OWNER
            - SYS_PTRACE
            drop:
            - AUDIT_WRITE
            - CHOWN
            # - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            # - SETGID
            - SETFCAP
            - SETPCAP
            # - SETUID
            - SYS_CHROOT
      volumes:
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: kafka-client
          secret:
            secretName: kafka-client
            optional: true
        - name: gcp-service-account
          secret:
            secretName: gke-service-account
            optional: true





---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: shopify-core-nginx-edge
  annotations:
    kubernetes.io/ingress.class: "shopify-core-nginx-edge"
    kubernetes.io/tls-acme: "false"
    ingress.kubernetes.io/backend-protocol: http

    

    
spec:
  
  backend:
    serviceName: web-headless
    servicePort: 80
  



---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: shopify-core-auth-nginx-edge
  annotations:
    kubernetes.io/ingress.class: "shopify-core-nginx-edge"
    kubernetes.io/tls-acme: "false"
    ingress.kubernetes.io/backend-protocol: http

    

    
    ingress.kubernetes.io/auth-url: http://minerva-verify.minerva.svc.cluster.local/
    ingress.kubernetes.io/auth-response-headers: X-Minerva-Request-Id,X-Forwarded-Email,X-Forwarded-User
    ingress.kubernetes.io/auth-signin: https://minerva.shopifycloud.com/auth/minerva?request=$authHeader0
    
spec:
  
  rules:
  - http:
      paths:
      - path: "/services/internal"
        backend:
          serviceName: web-headless
          servicePort: 80
      - path: "/admin/staff"
        backend:
          serviceName: web-headless
          servicePort: 80
  




---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: shopify-core-nginx-pp
  annotations:
    kubernetes.io/ingress.class: "shopify-core-nginx-pp"
    kubernetes.io/tls-acme: "false"
    ingress.kubernetes.io/backend-protocol: http

    

    
spec:
  
  backend:
    serviceName: web-headless
    servicePort: 80
  



---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: shopify-core-auth-nginx-pp
  annotations:
    kubernetes.io/ingress.class: "shopify-core-nginx-pp"
    kubernetes.io/tls-acme: "false"
    ingress.kubernetes.io/backend-protocol: http

    

    
    ingress.kubernetes.io/auth-url: http://minerva-verify.minerva.svc.cluster.local/
    ingress.kubernetes.io/auth-response-headers: X-Minerva-Request-Id,X-Forwarded-Email,X-Forwarded-User
    ingress.kubernetes.io/auth-signin: https://minerva.shopifycloud.com/auth/minerva?request=$authHeader0
    
spec:
  
  rules:
  - http:
      paths:
      - path: "/services/internal"
        backend:
          serviceName: web-headless
          servicePort: 80
      - path: "/admin/staff"
        backend:
          serviceName: web-headless
          servicePort: 80
  




---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: internal
  annotations:
    kubernetes.io/ingress.class: "nginx-internal"
    kubernetes.io/tls-acme: "false"

    

    
spec:
  rules:
    - host: shopify-core.shopifycloud.com
      http:
        paths:
        
        - path: /
          backend:
            serviceName: web-headless
            servicePort: 80
        



---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: internal-auth
  annotations:
    kubernetes.io/ingress.class: "nginx-internal"
    kubernetes.io/tls-acme: "false"

    

    
    ingress.kubernetes.io/auth-url: http://minerva-verify.minerva.svc.cluster.local/
    ingress.kubernetes.io/auth-response-headers: X-Minerva-Request-Id,X-Forwarded-Email,X-Forwarded-User
    ingress.kubernetes.io/auth-signin: https://minerva.shopifycloud.com/auth/minerva?request=$authHeader0
    
spec:
  rules:
    - host: shopify-core.shopifycloud.com
      http:
        paths:
        
        - path: /services/internal
          backend:
            serviceName: web-headless
            servicePort: 80
        - path: /admin/staff
          backend:
            serviceName: web-headless
            servicePort: 80
        

---
apiVersion: v1
kind: PodTemplate
metadata:
  name: task-runner-template
template:
  metadata:
    name: cloud-run
    labels:
      name: cloud-run
  spec:
    priorityClassName: high-priority
    automountServiceAccountToken: false
    hostIPC: true
    restartPolicy: Never
    activeDeadlineSeconds: 86400
    initContainers:
    - name: kafkabridge-setup # This creates the queue, incase kafkabridge hasn't gotten to it yet
      image: gcr.io/shopify-docker-images/apps/production/core-kafkabridge-init:2.0
      resources:
        requests:
          cpu: 10m
          memory: 100Mi
        limits:
          cpu: 500m
          memory: 500Mi
      env:
      # XXX: These values should be kept in sync with what kafkabridge-core has
      - name: QUEUE_MAX
        value: "2147483647" # 2GB
      - name: MESSAGE_MAX
        value: "1048576"    # 1MB
      - name: SYSV_MQ_SIZE
        value: "8589934588" # 8GB
      securityContext:
        privileged: true
    containers:
    - name: task-runner
      image: gcr.io/shopify-docker-images/apps/production/shopify:5e3fe6f547a976a04eb89a81dad22bf2ddbb964d
      args: []
      resources:
        requests:
          cpu: 1
      volumeMounts:
        - name: ejson-keys
          mountPath: /key
          readOnly: true
        - name: kafka-client
          mountPath: /kafka-client
          readOnly: true
      env:
        - name: SEMIAN_DISABLED
          value: "1"
        - name: POD_IDS
          value: "21,22,33,34,35,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,101,102,104,108,110,112,114,117,121,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209"
        - name: JOBS_REDIS_PARTITION_COUNT_DATA
          value: '{"fallback":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod126":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod127":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod129":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod140":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod1867":{"available_for_dequeue":1,"available_for_enqueue":1,"desired":1},"pod21":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod55":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod80":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2},"pod81":{"available_for_dequeue":2,"available_for_enqueue":2,"desired":2}}'
        - name: READY_CORE_CLUSTER_BY_LOCATION
          value: '{"gcp-northamerica-northeast1":["core-na-ne1-1","core-na-ne1-2"],"gcp-us-east1":["core-us-east1-28","core-us-east1-29","core-us-east1-30","core-us-east1-31","core-us-east1-33","core-us-east1-34","core-us-east1-35","core-us-east1-36"],"gcp-us-central1":["core-us-central1-28","core-us-central1-29","core-us-central1-30","core-us-central1-31","core-us-central1-32","core-us-central1-33","core-us-central1-34","core-us-central1-35"]}'
        - name: MAGELLAN_URL
          value: http://magellan.magellan-production.svc.cluster.local.:8438
        - name: RAILS_ENV
          value: "production"
        - name: ELASTICSEARCH_URL_PATTERN
          valueFrom:
            configMapKeyRef:
              name: env
              key: elasticsearch-url-pattern
        - name: SMTP_SERVICE_HOST
          valueFrom:
            configMapKeyRef:
              name: env
              key: smtp-relay
        - name: LOCATION
          valueFrom:
            configMapKeyRef:
              name: env
              key: location
        - name: MEMCACHED_PAGE_CACHE_SERVER_COUNT
          valueFrom:
            configMapKeyRef:
              name: env
              key: memcached-page-cache-server-count
        - name: MEMCACHED_IDENTITY_CACHE_SERVER_COUNT
          valueFrom:
            configMapKeyRef:
              name: env
              key: memcached-identity-cache-server-count
        - name: MEMCACHED_RAILS_CACHE_SERVER_COUNT
          valueFrom:
            configMapKeyRef:
              name: env
              key: memcached-rails-cache-server-count
        - name: ENV
          value: production
        - name: INTERNAL_PORT
          value: "3000"
        - name: EXTERNAL_PORT
          value: "3000"
        - name: PORT
          value: "3000"
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: KUBE_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_LOCATION
          valueFrom:
            configMapKeyRef:
              name: env
              key: location
        - name: KUBE_CLUSTER
          valueFrom:
            configMapKeyRef:
              name: env
              key: cluster-name
        - name: KUBE_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_AGGREGATE_BROKERS
          valueFrom:
            configMapKeyRef:
              name: kafka-clusters
              key: cloud-aggregate
        - name: KAFKA_REGIONAL_BROKERS
          valueFrom:
            configMapKeyRef:
              name: kafka-clusters
              key: local
        - name: KAFKA_CLIENT_CERT
          value: "/kafka-client/tls.crt"
        - name: KAFKA_CLIENT_KEY
          value: "/kafka-client/tls.key"

        # Use the new Ruby StatsD client
        - name: STATSD_USE_NEW_CLIENT
          value: "1"

        # For now, these two variables will do nothing
        # Because StatsD is configured manually in config/environments/production.rb
        - name: STATSD_IMPLEMENTATION
          value: "datadog"
        - name: STATSD_ADDR
          value: "$(HOST_IP):8125"

      securityContext:
        capabilities:
          add:
          - IPC_OWNER
          - SYS_PTRACE
          drop:
          - AUDIT_WRITE
          - CHOWN
          # - DAC_OVERRIDE
          - FOWNER
          - FSETID
          - KILL
          - MKNOD
          - NET_BIND_SERVICE
          # - SETGID
          - SETFCAP
          - SETPCAP
          # - SETUID
          - SYS_CHROOT
        privileged: false
    volumes:
      - name: ejson-keys
        secret:
          secretName: ejson-keys
      - name: kafka-client
        secret:
          secretName: kafka-client
          optional: true

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod21
spec:
  podId: 21

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod22
spec:
  podId: 22

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod33
spec:
  podId: 33

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod34
spec:
  podId: 34

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod35
spec:
  podId: 35

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod41
spec:
  podId: 41

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod42
spec:
  podId: 42

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod43
spec:
  podId: 43

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod44
spec:
  podId: 44

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod45
spec:
  podId: 45

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod46
spec:
  podId: 46

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod47
spec:
  podId: 47

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod48
spec:
  podId: 48

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod50
spec:
  podId: 50

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod51
spec:
  podId: 51

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod52
spec:
  podId: 52

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod53
spec:
  podId: 53

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod54
spec:
  podId: 54

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod55
spec:
  podId: 55

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod56
spec:
  podId: 56

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod57
spec:
  podId: 57

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod58
spec:
  podId: 58

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod59
spec:
  podId: 59

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod60
spec:
  podId: 60

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod61
spec:
  podId: 61

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod62
spec:
  podId: 62

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod63
spec:
  podId: 63

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod64
spec:
  podId: 64

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod65
spec:
  podId: 65

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod66
spec:
  podId: 66

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod68
spec:
  podId: 68

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod69
spec:
  podId: 69

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod70
spec:
  podId: 70

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod71
spec:
  podId: 71

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod72
spec:
  podId: 72

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod73
spec:
  podId: 73

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod74
spec:
  podId: 74

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod76
spec:
  podId: 76

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod77
spec:
  podId: 77

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod78
spec:
  podId: 78

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod79
spec:
  podId: 79

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod80
spec:
  podId: 80

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod81
spec:
  podId: 81

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod82
spec:
  podId: 82

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod83
spec:
  podId: 83

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod84
spec:
  podId: 84

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod85
spec:
  podId: 85

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod86
spec:
  podId: 86

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod87
spec:
  podId: 87

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod88
spec:
  podId: 88

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod89
spec:
  podId: 89

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod92
spec:
  podId: 92

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod93
spec:
  podId: 93

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod95
spec:
  podId: 95

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod96
spec:
  podId: 96

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod97
spec:
  podId: 97

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod98
spec:
  podId: 98

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod99
spec:
  podId: 99

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod101
spec:
  podId: 101

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod102
spec:
  podId: 102

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod104
spec:
  podId: 104

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod108
spec:
  podId: 108

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod110
spec:
  podId: 110

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod112
spec:
  podId: 112

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod114
spec:
  podId: 114

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod117
spec:
  podId: 117

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod121
spec:
  podId: 121

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod123
spec:
  podId: 123

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod126
spec:
  podId: 126

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod127
spec:
  podId: 127

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod128
spec:
  podId: 128

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod129
spec:
  podId: 129

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod130
spec:
  podId: 130

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod131
spec:
  podId: 131

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod132
spec:
  podId: 132

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod133
spec:
  podId: 133

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod134
spec:
  podId: 134

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod135
spec:
  podId: 135

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod136
spec:
  podId: 136

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod137
spec:
  podId: 137

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod138
spec:
  podId: 138

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod139
spec:
  podId: 139

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod140
spec:
  podId: 140

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod148
spec:
  podId: 148

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod149
spec:
  podId: 149

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod150
spec:
  podId: 150

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod151
spec:
  podId: 151

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod152
spec:
  podId: 152

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod153
spec:
  podId: 153

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod154
spec:
  podId: 154

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod155
spec:
  podId: 155

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod156
spec:
  podId: 156

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod157
spec:
  podId: 157

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod158
spec:
  podId: 158

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod159
spec:
  podId: 159

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod160
spec:
  podId: 160

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod161
spec:
  podId: 161

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod162
spec:
  podId: 162

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod163
spec:
  podId: 163

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod164
spec:
  podId: 164

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod165
spec:
  podId: 165

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod166
spec:
  podId: 166

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod167
spec:
  podId: 167

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod168
spec:
  podId: 168

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod169
spec:
  podId: 169

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod170
spec:
  podId: 170

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod171
spec:
  podId: 171

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod172
spec:
  podId: 172

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod173
spec:
  podId: 173

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod174
spec:
  podId: 174

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod175
spec:
  podId: 175

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod176
spec:
  podId: 176

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod177
spec:
  podId: 177

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod178
spec:
  podId: 178

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod179
spec:
  podId: 179

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod180
spec:
  podId: 180

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod181
spec:
  podId: 181

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod182
spec:
  podId: 182

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod183
spec:
  podId: 183

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod184
spec:
  podId: 184

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod185
spec:
  podId: 185

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod186
spec:
  podId: 186

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod187
spec:
  podId: 187

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod188
spec:
  podId: 188

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod189
spec:
  podId: 189

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod190
spec:
  podId: 190

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod191
spec:
  podId: 191

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod192
spec:
  podId: 192

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod193
spec:
  podId: 193

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod194
spec:
  podId: 194

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod195
spec:
  podId: 195

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod196
spec:
  podId: 196

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod197
spec:
  podId: 197

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod198
spec:
  podId: 198

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod199
spec:
  podId: 199

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod200
spec:
  podId: 200

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod201
spec:
  podId: 201

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod202
spec:
  podId: 202

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod203
spec:
  podId: 203

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod204
spec:
  podId: 204

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod205
spec:
  podId: 205

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod206
spec:
  podId: 206

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod207
spec:
  podId: 207

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod208
spec:
  podId: 208

---
apiVersion: stable.shopify.io/v1
kind: PingdomShop
metadata:
  name: pingdom-shop-pod209
spec:
  podId: 209

